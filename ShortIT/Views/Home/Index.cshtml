@{
    ViewData["Title"] = "Home Page";
}

<!-- Background Section -->
<div class="homepage-bg">
    <div class="overlay">
        <div class="container text-center">
            <div class="card shadow-lg p-5 mx-auto" style="max-width: 600px; background-color: rgba(255, 255, 255, 0.95);">
                <h1 class="display-4 mb-3">Welcome to ShortIT</h1>
                <p class="lead">Easily shorten and manage your URLs in one place.</p>

                @if (!User.Identity.IsAuthenticated)
                {
                    <p class="mt-4">You can view the URLs you have shortened by <a href="/User/Register" class="btn btn-primary btn-lg mx-2">Registering</a> or <a href="/User/Login" class="btn btn-outline-secondary btn-lg mx-2">Logging in</a>.</p>
                }
                else
                {
                    <p class="mt-4">You're logged in! You can also check out your new Urls from the <a href="/Url/Dashboard" class="btn btn-success btn-lg mx-2">Dashboard</a>.</p>
                }
                <p class="mt-4">You can also shorten URLs from the box below.</p>

                <!-- URL Shortening Form -->
                <form id="ShortITForm" class="mt-4" method="post" onsubmit="startShortening(event)">
                    <!-- Anti-Forgery Token -->
                    @Html.AntiForgeryToken()

                    <!-- Error Message Container -->
                    <div id="errorMessage" class="text-danger mb-3" style="display: none;"></div>

                    <!-- URL Input Field -->
                    <input type="text" id="urlInput" name="Url" class="form-control mb-3" placeholder="Enter URL here..." required oninput="checkFormCompletion()" />

                    <!-- Hidden Input for Symbols Count -->
                    <div id="symbolsCountContainer" class="mt-3" style="display: none;">
                        <label for="symbolsCount" class="form-label">Number of symbols (5-10):</label>
                        <input type="number" id="symbolsCount" name="SymbolsCount" class="form-control" min="5" max="10" placeholder="Enter a number between 5 and 10" oninput="checkFormCompletion()" />
                    </div>

                    <!-- Manual Custom URL Input (Hidden by default) -->
                    <div id="manualCustomUrlContainer" class="mt-3" style="display: none;">
                        <label for="customUrl" class="form-label">Custom URL:</label>
                        <div class="input-group">
                            <span class="input-group-text" id="currentUrlPrefix">@($"{Context.Request.Scheme}://{Context.Request.Host}/")</span>
                            <input type="text" id="customUrl" name="CustomUrl" class="form-control" placeholder="Enter custom short URL" aria-describedby="currentUrlPrefix" oninput="checkFormCompletion()" />
                        </div>
                    </div>

                    <!-- Maximum Uses Input -->
                    <div id="maxUsesContainer" class="mt-3">
                        <label for="maxUses" class="form-label">Maximum Uses (leave blank for no limit):</label>
                        <input type="number" id="maxUses" name="MaxUses" class="form-control" min="1" placeholder="Enter maximum uses (optional)" />
                    </div>

                    <div class="d-flex justify-content-center mt-3">
                        <!-- Generate Random Button -->
                        <button type="button" class="btn btn-primary btn-lg mx-2" onclick="showSymbolsCount()">Generate Random</button>

                        <!-- Shorten Manually Button -->
                        <button type="button" class="btn btn-success btn-lg mx-2" onclick="showCustomUrlInput()">Shorten Manually</button>
                    </div>

                    <!-- Submit Button for Shortening (Initially Hidden) -->
                    <div id="submitButtonContainer" class="text-center mt-4" style="display: none;">
                        <button type="submit" class="btn btn-dark btn-lg">Shorten URL</button>
                    </div>
                </form>

                <!-- Success Message Container -->
                <div id="successMessage" class="text-success mt-4" style="display: none;"></div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for URL Generation and Validation -->
<script>
    function isValidUrl(url) {
        const urlPattern = new RegExp(
            '^(https?:\\/\\/)?' + // protocol
            '((([a-zA-Z0-9\\-\\.]+)\\.[a-zA-Z]{2,})|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR IP (v4) address
            '(\\:\\d+)?(\\/[-a-zA-Z0-9%_\\+.~#?&//=]*)?$', // port and path
            'i'
        );
        return !!urlPattern.test(url);
    }

    function checkFormCompletion() {
        const url = document.getElementById('urlInput').value;
        const symbolsCountVisible = document.getElementById('symbolsCountContainer').style.display !== 'none';
        const customUrlVisible = document.getElementById('manualCustomUrlContainer').style.display !== 'none';

        if (!isValidUrl(url)) {
            displayError("Please enter a valid URL.");
            document.getElementById('submitButtonContainer').style.display = 'none';
            return;
        } else {
            clearError();
        }

        let isFormComplete = false;

        if (symbolsCountVisible) {
            const symbolsCount = document.getElementById('symbolsCount').value;
            isFormComplete = symbolsCount >= 5 && symbolsCount <= 10;
        } else if (customUrlVisible) {
            const customUrl = document.getElementById('customUrl').value;
            isFormComplete = customUrl;
        }

        document.getElementById('submitButtonContainer').style.display = isFormComplete ? 'block' : 'none';
    }

    async function startShortening(event) {
        event.preventDefault();

        const url = document.getElementById('urlInput').value;
        const symbolsCountVisible = document.getElementById('symbolsCountContainer').style.display !== 'none';
        const customUrlVisible = document.getElementById('manualCustomUrlContainer').style.display !== 'none';
        const maxUses = document.getElementById('maxUses').value;

        const payload = { Url: url };

        if (symbolsCountVisible) {
            const symbolsCount = document.getElementById('symbolsCount').value;
            payload.SymbolsCount = parseInt(symbolsCount);
        } else if (customUrlVisible) {
            const customUrl = document.getElementById('customUrl').value;
            payload.CustomUrl = customUrl;
        }

        if (maxUses) {
            payload.MaxUses = parseInt(maxUses);
        }

        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        try {
            const response = await fetch('/Url/ShortenUrl', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify(payload),
            });

            if (response.ok) {
                const result = await response.json();
                displaySuccess(`Shortened URL created: <a href="${result.shortenedUrl}" target="_blank">${result.shortenedUrl}</a>`);
                clearForm();
            } else {
                const errorResult = await response.json();
                displayError(errorResult.message || "Failed to shorten URL. Please try again.");
            }
        } catch (error) {
            displayError("An error occurred: " + error.message);
        }
    }

    function showSymbolsCount() {
        document.getElementById('symbolsCountContainer').style.display = 'block';
        document.getElementById('manualCustomUrlContainer').style.display = 'none';
    }

    function showCustomUrlInput() {
        document.getElementById('manualCustomUrlContainer').style.display = 'block';
        document.getElementById('symbolsCountContainer').style.display = 'none';
    }

    function displayError(message) {
        document.getElementById('errorMessage').textContent = message;
        document.getElementById('errorMessage').style.display = 'block';
        document.getElementById('successMessage').style.display = 'none';
    }

    function displaySuccess(message) {
        document.getElementById('successMessage').innerHTML = message;
        document.getElementById('successMessage').style.display = 'block';
        document.getElementById('errorMessage').style.display = 'none';
    }

    function clearForm() {
        document.getElementById('urlInput').value = '';
        document.getElementById('symbolsCount').value = '';
        document.getElementById('customUrl').value = '';
        document.getElementById('maxUses').value = '';
        document.getElementById('symbolsCountContainer').style.display = 'none';
        document.getElementById('manualCustomUrlContainer').style.display = 'none';
        document.getElementById('submitButtonContainer').style.display = 'none';
    }

    function clearError() {
        document.getElementById('errorMessage').style.display = 'none';
    }

    document.getElementById('urlInput').addEventListener('input', checkFormCompletion);
</script>

<!-- Additional Styling -->
<style>
    .homepage-bg {
        background-image: url('../images/background.webp');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        overflow: hidden;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .card {
        border-radius: 12px;
        z-index: 1;
    }

    .display-4 {
        font-weight: 700;
        color: #333;
    }

    .lead {
        color: #555;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn-dark {
        background-color: #343a40;
        border-color: #343a40;
    }
</style>
